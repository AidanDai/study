{"diagram":{"image":{"height":200,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","width":200,"y":0,"x":0},"elements":{"id":"root","structure":"mind_right","title":"Lasted ECMAScript","root":true,"theme":"theme3","children":[{"id":"157bdf5f836424","title":"标准全局对象","children":[{"id":"157c62dc80c61d38","title":"常量属性","parent":"157bdf5f836424","children":[{"id":"157c62e2d2dd5f83","title":"Infinity","parent":"157c62dc80c61d38","children":[]},{"id":"157c62e515128115","title":"NaN","parent":"157c62dc80c61d38","children":[]},{"id":"157c62ebeb6a0462","title":"undefined","children":[],"parent":"157c62dc80c61d38"},{"id":"157c62ec28ce0587","title":"null","parent":"157c62dc80c61d38","children":[]}]},{"id":"157c62f5573c175","title":"方法属相","parent":"157bdf5f836424","children":[{"id":"157c62f920ec3576","title":"eval()","parent":"157c62f5573c175","children":[]},{"id":"157c63003ca51231","title":"isFinite()","parent":"157c62f5573c175","children":[]},{"id":"157c63069521e411","title":"isNaN()","children":[],"parent":"157c62f5573c175"},{"id":"157c6309bcb3e724","title":"parseInt()","children":[],"parent":"157c62f5573c175"},{"id":"157c630beef2ef18","title":"parseFloat()","children":[],"parent":"157c62f5573c175"},{"id":"157c6310e25fe699","title":"encodeURI()","children":[],"parent":"157c62f5573c175"},{"id":"157c6315cd99f962","title":"decodeURI()","parent":"157c62f5573c175","children":[]},{"id":"157c631a1aa91b56","title":"encodeURIComponent()","parent":"157c62f5573c175","children":[]},{"id":"157c6320f8983351","title":"decodeURIComponent()","children":[],"parent":"157c62f5573c175"}]},{"id":"157c633136f35320","title":"基本对象","parent":"157bdf5f836424","children":[{"id":"157c0e51d3573144","title":"Object","children":[],"parent":"157c633136f35320"},{"id":"157c0e7ca7d1287","title":"Function","parent":"157c633136f35320","children":[]},{"id":"157c0e6d4bd07f3","title":"Boolean","children":[],"parent":"157c633136f35320"},{"id":"157bdd13c07ab266","title":"Symbol","parent":"157c633136f35320","children":[{"id":"157bdd2c939b6771","title":"Symbol()","parent":"157bdd13c07ab266","children":[]},{"id":"157bdd1681646427","title":"Symbol.for()","parent":"157bdd13c07ab266","children":[]},{"id":"157bdd1ea0c06c2","title":"Symbol.ketFor()","parent":"157bdd13c07ab266","children":[]},{"id":"157bddd2108de686","title":"Symbol.hasInstance","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.hasInstance` 属性，指向一个内部方法。当其他对象使用 `instanceof` 运算符，判断是否为该对象的实例时，会调用这个方法。"},{"id":"157bdde30f484651","title":"Symbol.isConcatSpreadable","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.isConcatSpreadable` 属性等于一个布尔值，表示该对象使用`Array.prototype.concat()` 时，是否可以展开。"},{"id":"157bddf8b25fe699","title":"Symbol.iterator","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.iterator` 属性，指向该对象的默认遍历器方法。"},{"id":"157bde142aea8a65","title":"Symbol.match","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.match` 属性，指向一个函数。当执行 `str.match(obj)` 时，如果 `obj` 对象的该属性存在，会调用它，返回该方法的返回值。"},{"id":"157bdd45fa9ca579","title":"Symbol.prototype","parent":"157bdd13c07ab266","children":[{"id":"157bdd49495a8765","title":"Symbol.prototype.toSource()","parent":"157bdd45fa9ca579","children":[],"icons":[{"text":"&#xe693","index":"39","name":""}]},{"id":"157bdd498244d530","title":"Symbol.prototype.toString()","parent":"157bdd45fa9ca579","children":[],"icons":[{"text":"&#xe693","index":"39","name":""}]},{"id":"157bdd49bcad0181","title":"Symbol.prototype.valueOf()","parent":"157bdd45fa9ca579","children":[],"icons":[{"text":"&#xe693","index":"39","name":""}]}]},{"id":"157bde3d0bb34620","title":"Symbol.replace","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.replace` 属性，指向一个方法，当该对象被 `String.prototype.replace` 方法调用时，会返回该方法的返回值。"},{"id":"157bde6057770343","title":"Symbol.search","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.search` 属性，指向一个方法，当该对象被 `String.prototype.search` 方法调用时，会返回该方法的返回值。"},{"id":"157bde7de8476346","title":"Symbol.species","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.species` 属性，指向一个方法。该对象作为构造函数创造实例时，会调用这个方法。即如果 `this.constructor[Symbol.species]` 存在，就会使用这个属性作为构造函数，来创造新的实例对象。\n\n注：默认替代方法"},{"id":"157bde90d184e830","title":"Symbol.split","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.split` 属性，指向一个方法，当该对象被 `String.prototype.split` 方法调用时，会返回该方法的返回值。"},{"id":"157bde9803c3a122","title":"Symbol.toPrimitive","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.toPrimitive` 属性，指向一个方法。该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。\n\n`Symbol.toPrimitive` 被调用时，会接受一个字符串参数，表示当前运算的模式，一共有三种模式。\n\n- Number：该场合需要转成数值\n- String：该场合需要转成字符串\n- Default：该场合可以转成数值，也可以转成字符串"},{"id":"157bded87dafb498","title":"Symbol.unscopables","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.unscopables` 属性，指向一个对象。该对象指定了使用 `with` 关键字时，哪些属性会被 `with` 环境排除。"},{"id":"157bdf29ef0dd986","title":"SYmbol.toStringTag","parent":"157bdd13c07ab266","children":[],"note":"对象的 `Symbol.toStringTag` 属性，指向一个方法。在该对象上面调用 `Object.prototype.toString`  方法时，如果这个属性存在，它的返回值会出现在`toString` 方法返回的字符串之中，表示对象的类型。也就是说，这个属性可以用来定制 `[object Object]` 或 `[object Array]` 中 `object` 后面的那个字符串。"}],"collapsed":true},{"id":"157c0e73b5771b44","title":"Error","parent":"157c633136f35320","children":[]}]},{"id":"157c634552d77846","title":"数字和日期","parent":"157bdf5f836424","children":[{"id":"157c634886429e16","title":"Number","parent":"157c634552d77846","children":[]},{"id":"157c634a175b9e72","title":"Math","parent":"157c634552d77846","children":[]},{"id":"157c634b48c1598","title":"Date","parent":"157c634552d77846","children":[]}]},{"id":"157c634dcdafd98","title":"文本处理","parent":"157bdf5f836424","children":[{"id":"157c63505cb199","title":"String","parent":"157c634dcdafd98","children":[]},{"id":"157c63517ee4cb29","title":"RegExp","parent":"157c634dcdafd98","children":[]}]},{"id":"157c63576dc08b3","title":"索引集合","parent":"157bdf5f836424","children":[{"id":"157c635b4027a147","title":"Array","parent":"157c63576dc08b3","children":[]}]},{"id":"157c636c801ddf86","title":"键值集合","parent":"157bdf5f836424","children":[{"id":"157c636f7ffde86","title":"Set","parent":"157c636c801ddf86","children":[]},{"id":"157c63757331ba10","title":"WeakSet","parent":"157c636c801ddf86","children":[]},{"id":"157c6370ee48f155","title":"Map","parent":"157c636c801ddf86","children":[]},{"id":"157c637c75141225","title":"WeakMap","children":[],"parent":"157c636c801ddf86"}]},{"id":"157c6390a98b5470","title":"失量集合","children":[{"id":"157c63940a646a27","title":"SIMD","children":[],"parent":"157c6390a98b5470"}],"parent":"157bdf5f836424"},{"id":"157c6399fbfd0f81","title":"结构化数据","children":[{"id":"157c639c6340fb6","title":"ArrayBuffer","children":[],"parent":"157c6399fbfd0f81"},{"id":"157c63a6c1eefd93","title":"JSON","children":[],"parent":"157c6399fbfd0f81"}],"parent":"157bdf5f836424"},{"id":"157c63b55113b323","title":"控制抽象对象","children":[{"id":"157c63bb93a64c39","title":"Promise","children":[],"parent":"157c63b55113b323"},{"id":"157c63bcf910d35","title":"Generator","children":[],"parent":"157c63b55113b323"},{"id":"157c63bf9a12af16","title":"GeneratorFunction","children":[],"parent":"157c63b55113b323"}],"parent":"157bdf5f836424"},{"id":"157c63c37049959","title":"反射","children":[{"id":"157c63c59a4e3988","title":"Reflect","children":[],"parent":"157c63c37049959"},{"id":"157c63c80fba4f64","title":"Proxy","children":[],"parent":"157c63c37049959"}],"parent":"157bdf5f836424"},{"id":"157c63cc1ca0391","title":"国际化","children":[{"id":"157c63d720f37d21","title":"Intl","children":[],"parent":"157c63cc1ca0391"}],"parent":"157bdf5f836424"},{"id":"157c63dcffbb972","title":"其他","children":[{"id":"157c63df1cb5e736","title":"arguments","children":[],"parent":"157c63dcffbb972"},{"id":"157c63e0da8ce380","title":"Interator","children":[],"parent":"157c63dcffbb972"}],"parent":"157bdf5f836424"}],"parent":"root","collapsed":false},{"id":"157bdf6c57479b47","title":"Characteristic","children":[{"id":"157c0dcf6201f412","title":"let","children":[],"parent":"157bdf6c57479b47","note":"声明局部变量"},{"id":"157c0dd0cbf5b935","title":"const","parent":"157bdf6c57479b47","children":[],"note":"声明只读的常量（声明引用类型变量时，相当于常指针）"},{"id":"157c0dedae49156","title":"Arrow Function","children":[],"parent":"157bdf6c57479b47","note":"箭头函数内的 `this` 值继承自外围作用域。"},{"id":"157bdfc515545e27","title":"Iterator","children":[{"id":"157bef826f19e61","title":"迭代协议","children":[{"id":"157bef8c26e55133","title":"可遍历（可迭代）协议","parent":"157bef826f19e61","children":[],"note":"|属性 |值   |\n|:----|:----|\n|[Symbol.iterator]\t|返回一个对象的无参函数，被返回对象符合迭代器协议。当一个对象需要被遍历的时候（比如开始用于一个 `for-of` 循环中），它的 `@@iterator` 方法被调用并且无参数，然后返回一个用于在遍历中获得值的迭代器。|"},{"id":"157bef95bdf73745","title":"迭代器协议","children":[],"parent":"157bef826f19e61","note":"|属性 |值   |\n|:----|:----|\n|next |  返回一个对象的无参函数，被返回对象拥有两个属性：<br/>  done (boolean) <br/> 如果迭代器已经经过了被迭代序列时为 true。这时 value <br/> 可能描述了该迭代器的返回值。返回值在这里有更多解释。 <br/> 如果迭代器可以产生序列中的下一个值，则为 false。这等效于连同 done 属性也不指定。<br/> value - 迭代器返回的任何 JavaScript 值。done 为 true 时可省略。|"}],"parent":"157bdfc515545e27"},{"id":"157bef1cb17ff599","title":"Iterator 使用场景","children":[{"id":"157bef2129dcee80","title":"解构赋值","children":[],"parent":"157bef1cb17ff599","note":"```javascript\nlet set = new Set().add('a').add('b').add('c');\n\nlet [x,y] = set;\n// x='a'; y='b'\n```"},{"id":"157bef3a0c7fc998","title":"扩展运算符","children":[],"parent":"157bef1cb17ff599","note":"```javascript\nvar str = 'hello';\n[...str] //  ['h','e','l','l','o']\n```"},{"id":"157bef530d8ad167","title":"for-of","parent":"157bef1cb17ff599","children":[]},{"id":"157c0cddbbe8150","title":"Array","parent":"157bef1cb17ff599","children":[]},{"id":"157bef534c481250","title":"Array.from()","parent":"157bef1cb17ff599","children":[]},{"id":"157bef5387f9d161","title":"Set","children":[],"parent":"157bef1cb17ff599"},{"id":"157c0cd5985f595","title":"Map","parent":"157bef1cb17ff599","children":[]},{"id":"157c0cd0bf467b40","title":"Generator","parent":"157bef1cb17ff599","children":[]},{"id":"157bef461623a922","title":"yield*","children":[],"parent":"157bef1cb17ff599","note":"```javascript\nlet generator = function* () {\n  yield 1;\n  yield* [2,3,4];\n  yield 5;\n};\n\nvar iterator = generator();\n\niterator.next() // { value: 1, done: false }\niterator.next() // { value: 2, done: false }\niterator.next() // { value: 3, done: false }\niterator.next() // { value: 4, done: false }\niterator.next() // { value: 5, done: false }\niterator.next() // { value: undefined, done: true }\n```"},{"id":"157bef61e1e3621","title":"Promise","children":[],"parent":"157bef1cb17ff599"}],"parent":"157bdfc515545e27"}],"parent":"157bdf6c57479b47"},{"id":"157bee7969333d20","title":"Generator","children":[{"id":"157beece4365b635","title":"Generator.prototype.next()","children":[{"id":"157c0cb037f90856","title":"参数","children":[],"parent":"157beece4365b635","note":"`yield` 句本身没有返回值，或者说总是返回 `undefined` 。`next` 方法可以带一个参数，该参数就会被当作上一个 `yield` 语句的返回值。"}],"parent":"157bee7969333d20"},{"id":"157beed6ca723e14","title":"Generator.prototype.throw()","parent":"157bee7969333d20","children":[],"note":"Generator 函数返回的遍历器对象，都有一个 `throw` 方法，可以在函数体外抛出错误，然后在 Generator 函数体内捕获。"},{"id":"157beed3c0d1999","title":"Generator.prototype.return()","children":[],"parent":"157bee7969333d20","note":"Generator 函数返回的遍历器对象，还有一个`return` 方法，可以返回给定的值，并且终结遍历 Generator 函数。"},{"id":"157c0cb9e57a4264","title":"yield*","parent":"157bee7969333d20","children":[],"note":"从语法角度看，如果 `yield` 命令后面跟的是一个遍历器对象，需要在 `yield` 命令后面加上星号，表明它返回的是一个遍历器对象。这被称为 `yield*` 语句。"},{"id":"157c0cc29d020512","title":"this","parent":"157bee7969333d20","children":[],"note":"Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的 prototype 对象上的方法。"},{"id":"157c0cc4285f1a94","title":"状态机与协程","parent":"157bee7969333d20","children":[],"note":"协程（coroutine）是一种程序运行的方式，可以理解成“协作的线程”或“协作的函数”。协程既可以用单线程实现，也可以用多线程实现。前者是一种特殊的子例程，后者是一种特殊的线程。"}],"parent":"157bdf6c57479b47","icons":[{"index":"39","text":"&#xe693","name":""}]},{"id":"157c0caa08623713","title":"Promise","children":[{"id":"157c13a73b5b5d71","title":"Promise.prototype","parent":"157c0caa08623713","children":[{"id":"157c13aac14fa597","title":"Promise.prototype.then()","parent":"157c13a73b5b5d71","children":[],"note":"`then()` 方法返回一个 `Promise` 。它有两个参数，分别为 `Promise` 在  success 和 failure 情况下的回调函数。"},{"id":"157c13b00137b748","title":"Promise.prototype.catch()","children":[],"parent":"157c13a73b5b5d71","note":"`catch()` 方法只处理 `Promise` 被拒绝的情况，并返回一个 `Promise`。该方法的行为和调用 `Promise.prototype.then(undefined, onRejected)` 相同。"}]},{"id":"157c13b553580750","title":"Promise.resolve()","children":[],"parent":"157c0caa08623713","note":"`Promise.resolve(value)` 方法返回一个以给定值解析后的 `Promise` 对象。但如果这个值是个 `thenable`（即带有 `then` 方法），返回的 `promise` 会“跟随”这个 `thenable` 的对象，采用它的最终状态（指`resolved/rejected/pending/settled`）；否则以该值为成功状态返回 `promise` 对象。"},{"id":"157c13be93ea9466","title":"Promise.reject()","children":[],"parent":"157c0caa08623713","note":"`Promise.reject(reason)` 方法返回一个用reason拒绝的 `Promise`。"},{"id":"157c13c2bb47eb49","title":"Promise.all()","children":[],"parent":"157c0caa08623713","note":"`Promise.all(iterable)`  方法返回一个 `promise`，该 `promise` 会等 `iterable` 参数内的所有 `promise` 都被 `resolve` 后被 `resolve`，或以第一个 `promise` 被 `reject` 的原因而 `reject` 。"},{"id":"157c13c52d813b7","title":"Promise.race()","children":[],"parent":"157c0caa08623713","note":"`Promise.race(iterable)` 方法返回一个 `promise`，这个 `promise` 在 `iterable` 中的任意一个 `promise` 被解决或拒绝后，立刻以相同的解决值被解决或以相同的拒绝原因被拒绝。"},{"id":"157c157f0352313","title":"Promise.finally()","parent":"157c0caa08623713","children":[],"note":"`finally` 方法用于指定不管 `Promise` 对象最后状态如何，都会执行的操作。它与 `done` 方法的最大区别，它接受一个普通的回调函数作为参数，该函数不管怎样都必须执行。"},{"id":"157c15915f549d28","title":"Promise.done()","parent":"157c0caa08623713","children":[],"note":"`Promise` 对象的回调链，不管以 `then` 方法或`catch` 方法结尾，要是最后一个方法抛出错误，都有可能无法捕捉到（因为 `Promise` 内部的错误不会冒泡到全局）。因此，我们可以提供一个 `done`方法，总是处于回调链的尾端，保证抛出任何可能出现的错误。"}],"parent":"157bdf6c57479b47","note":"```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n```\n\nPromise 内部的错误不会冒泡到全局。"},{"id":"157c0e17207bbd73","title":"Async","parent":"157bdf6c57479b47","children":[],"note":"`async` 函数就是 Generator 函数的语法糖。\n\n- （1）内置执行器\n- （2）更好的语义\n- （3）更广的适用性\n- （4）返回值是 `Promise`"},{"id":"157c0e39ba224414","title":"Proxy","parent":"157bdf6c57479b47","children":[],"note":"Proxy 对象用来为基础操作（例如：属性查找、赋值、枚举、方法调用等）定义用户自定义行为。"},{"id":"157c0e3c8054fe31","title":"Reflect","children":[],"parent":"157bdf6c57479b47","note":"`Reflect` 对象提供了若干个能对任意对象进行某种特定的可拦截操作（`interceptable operation`）的方法。"},{"id":"157c0e06a711f112","title":"class","children":[{"id":"157c164e7d8c7777","title":"extends","parent":"157c0e06a711f112","children":[],"note":"```javascript\nclass ColorPoint extends Point {\n  constructor(x, y, color) {\n    super(x, y); // 调用父类的constructor(x, y)\n    this.color = color;\n  }\n\n  toString() {\n    return this.color + ' ' + super.toString(); // 调用父类的toString()\n  }\n}\n```"},{"id":"157c166647d7b148","title":"getter\\setter","parent":"157c0e06a711f112","children":[],"note":"```javascript\nclass MyClass {\n  constructor() {\n    // ...\n  }\n  get prop() {\n    return 'getter';\n  }\n  set prop(value) {\n    console.log('setter: '+value);\n  }\n}\n\nlet inst = new MyClass();\n\ninst.prop = 123;\n// setter: 123\n\ninst.prop\n// 'getter'\n```"},{"id":"157c16767c734720","title":"static","children":[],"parent":"157c0e06a711f112"},{"id":"157c1690299db485","title":"new.target","children":[],"parent":"157c0e06a711f112"}],"parent":"157bdf6c57479b47","note":"```javascript\n//定义类\nclass Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  toString() {\n    return '(' + this.x + ', ' + this.y + ')';\n  }\n}\n```"},{"id":"157c16b566b34c20","title":"Decorator","parent":"157bdf6c57479b47","children":[],"icons":[{"index":"39","text":"&#xe693","name":""}]},{"id":"157c0e07ca667540","title":"Module","children":[{"id":"157c22fabd2d3e82","title":"export","parent":"157c0e07ca667540","children":[]},{"id":"157c22fc5575b435","title":"import","parent":"157c0e07ca667540","children":[]},{"id":"157c6077cf5aef68","title":"加载实质","parent":"157c0e07ca667540","children":[],"note":"全部引用"},{"id":"157c6098165fe199","title":"循环加载","parent":"157c0e07ca667540","children":[],"note":"动态引用"}],"parent":"157bdf6c57479b47","note":""}],"parent":"root","collapsed":true},{"id":"157c0c9fb4263e39","title":"异步编程","parent":"root","children":[{"id":"157c0ca24517d648","title":"回调函数","parent":"157c0c9fb4263e39","children":[]},{"id":"157c0ca279aa464","title":"Promise","parent":"157c0c9fb4263e39","children":[],"note":"```javascript\nfunction getURL(URL) {\n    return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.open('GET', URL, true);\n        req.onload = function () {\n            if (req.status === 200) {\n                resolve(req.responseText);\n            } else {\n                reject(new Error(req.statusText));\n            }\n        };\n        req.onerror = function () {\n            reject(new Error(req.statusText));\n        };\n        req.send();\n    });\n}\n// 运行示例\nvar URL = \"http://httpbin.org/get\";\ngetURL(URL).then(function onFulfilled(value){\n    console.log(value);\n}).catch(function onRejected(error){\n    console.error(error);\n});\n```"},{"id":"157c0ca2bc21a810","title":"Generator","parent":"157c0c9fb4263e39","children":[],"icons":[{"index":"39","text":"&#xe693","name":""}]},{"id":"157c0da01b2baa72","title":"Async","parent":"157c0c9fb4263e39","children":[]}],"collapsed":false},{"id":"157c5d65dcfa6965","title":"模块化","parent":"root","children":[{"id":"157c5d6d5718aa54","title":"AMD","parent":"157c5d65dcfa6965","children":[],"note":"运行时加载（浅拷贝）"},{"id":"157c5d6e867ed792","title":"CMD","parent":"157c5d65dcfa6965","children":[],"note":"运行时加载（浅拷贝）"},{"id":"157c5d6ffae06f2","title":"CommonJS","parent":"157c5d65dcfa6965","children":[],"note":"运行时加载（浅拷贝）"},{"id":"157c5dd2e75e1588","title":"import/export","parent":"157c5d65dcfa6965","children":[],"note":"编译时加载（全部引用）"}],"collapsed":false}]}},"meta":{"id":"57d2f00fe4b0942d7a8c12ea","member":"webAidan","exportTime":"2017-06-05 12:35:50","diagramInfo":{"category":"mind_right","title":"Lasted ECMAScript","created":"2016-09-10 01:23:27","creator":"webAidan","modified":"2017-03-18 01:43:45"},"type":"ProcessOn Schema File","version":"1.0"}}